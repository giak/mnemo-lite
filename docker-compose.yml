x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

version: '3.8'

services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: mnemo-postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-mnemo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mnemopass}
      POSTGRES_DB: ${POSTGRES_DB:-mnemolite}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - ./db/scripts:/app/scripts:ro
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-mnemo} -d $${POSTGRES_DB:-mnemolite} -q"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: >
      postgres
        -c shared_buffers=1GB
        -c effective_cache_size=3GB
        -c maintenance_work_mem=256MB
        -c work_mem=32MB
        -c max_parallel_workers_per_gather=2
    shm_size: 1g
    networks:
      backend:
        aliases:
          - db
    logging: *default-logging

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: mnemo-api
    restart: unless-stopped
    ports:
      - "127.0.0.1:${API_PORT:-8001}:8000"
    environment:
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-mnemo}:${POSTGRES_PASSWORD:-mnemopass}@db:5432/${POSTGRES_DB:-mnemolite}"
      TEST_DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-mnemo}:${POSTGRES_PASSWORD:-mnemopass}@db:5432/mnemolite_test"
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-nomic-ai/nomic-embed-text-v1.5}
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-768}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./workers:/app/workers
      - ./scripts:/app/scripts
      - ./certs:/app/certs:ro
      - ./tests:/app/tests
      - ./logs:/app/logs
      - ./templates:/app/templates
      - ./static:/app/static
      # REMOVED: postgres_data volume (SECURITY: API should NOT access DB files directly)
    deploy:
      resources:
        limits:
          cpus: '2'        # Increased for parallel embedding generation
          memory: 4G       # Increased for dual embeddings (TEXT + CODE) support
                          # EPIC-06: TEXT=1.25GB + CODE=1.9GB + baseline=0.7GB = ~3.85GB
    networks:
      backend:
      frontend:
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # worker:
  #   build:
  #     context: .
  #     dockerfile: workers/Dockerfile
  #   container_name: mnemo-worker
  #   restart: unless-stopped
  #   environment:
  #     DATABASE_URL: "postgresql://${POSTGRES_USER:-mnemo}:${POSTGRES_PASSWORD:-mnemopass}@db:5432/${POSTGRES_DB:-mnemolite}"
  #     EMBEDDING_MODEL: ${EMBEDDING_MODEL:-nomic-ai/nomic-embed-text-v1.5}
  #     EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-768}
  #     ENVIRONMENT: ${ENVIRONMENT:-development}
  #     PYTHONUNBUFFERED: "1"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./workers:/app
  #     - ./certs:/app/certs:ro
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #   networks:
  #     backend:
  #   logging: *default-logging

volumes:
  postgres_data:

networks:
  frontend:
    driver: bridge
  backend:
    internal: true
    driver: bridge