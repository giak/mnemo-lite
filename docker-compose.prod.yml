version: '3.8'

# Configuration de surcharge pour l'environnement de production
services:
  db:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '${PG_CPU_LIMIT:-2}'
          memory: ${PG_MEM_LIMIT:-4G}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    command: >
      postgres -c shared_preload_libraries=pg_cron,pg_partman_bgw,pgmq.pg_queue
               -c pg_partman_bgw.interval=3600
               -c pg_partman_bgw.role=${POSTGRES_USER:-mnemo}
               -c pg_cron.use_background_workers=on
               -c shared_buffers=1GB
               -c work_mem=32MB
               -c effective_cache_size=2GB
               -c maintenance_work_mem=256MB
               -c max_parallel_workers_per_gather=4
               -c wal_level=replica
               -c max_wal_size=2GB
               -c checkpoint_timeout=15min
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-mnemo}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  chromadb:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '${CHROMA_CPU_LIMIT:-1}'
          memory: ${CHROMA_MEM_LIMIT:-2G}
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=False
      - ALLOW_RESET=false
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    restart: always
    deploy:
      resources:
        limits:
          cpus: ${REDIS_CPU_LIMIT:-0.5}
          memory: ${REDIS_MEM_LIMIT:-512M}
    volumes:
      - redis-data:/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "127.0.0.1:${API_PORT:-8000}:8000"
    volumes:
      - ${CERTS_PATH:-./certs}:/app/certs:ro
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
      - DEBUG=False
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          cpus: ${API_CPU_LIMIT:-1}
          memory: ${API_MEM_LIMIT:-1G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  worker:
    build:
      context: ./workers
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    volumes:
      - ${CERTS_PATH:-./certs}:/app/certs:ro
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          cpus: ${WORKER_CPU_LIMIT:-1}
          memory: ${WORKER_MEM_LIMIT:-1G}
    healthcheck:
      test: ["CMD", "python", "-c", "import os; os.system('ps aux | grep ingestion.py | grep -v grep || exit 1')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Ajout d'un service reverse proxy pour la production
  traefik:
    image: traefik:v2.9
    container_name: mnemo-traefik
    restart: always
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@mnemolite.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - frontend

  # Service de monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mnemo-prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.0.0
    container_name: mnemo-grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - monitoring
      - frontend

volumes:
  prometheus_data:
  grafana_data:
  traefik_data:
  redis-data:
  postgres-data:
  chroma-data:

networks:
  monitoring:
    internal: true
  frontend:
    driver: bridge
  mnemo-network:
    driver: bridge

redis:
  restart: always
  deploy:
    resources:
      limits:
        cpus: ${REDIS_CPU_LIMIT:-0.5}
        memory: ${REDIS_MEM_LIMIT:-512M}
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3" 