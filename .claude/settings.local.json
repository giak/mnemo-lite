{
  "permissions": {
    "allow": [
      "Bash(docker-compose exec:*)",
      "Bash(curl:*)",
      "Bash(python3:*)",
      "Bash(docker-compose restart:*)",
      "Bash(docker-compose logs:*)",
      "Bash(services/lexical_search_service.py )",
      "Bash(services/vector_search_service.py )",
      "Bash(services/rrf_fusion_service.py )",
      "Bash(services/hybrid_code_search_service.py )",
      "Bash(routes/code_search_routes.py)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git check-ignore:*)",
      "Bash(cloc:*)",
      "Bash(find:*)",
      "Bash(pytest:*)",
      "Bash(docker exec:*)",
      "Bash(./test_application.sh:*)",
      "mcp__web-search__search",
      "Bash(docker compose ps:*)",
      "Bash(docker compose:*)",
      "Bash(time docker compose build:*)",
      "Bash(docker ps:*)",
      "Bash(docker images:*)",
      "Bash(docker image inspect:*)",
      "Bash(awk:*)",
      "Bash(docker history:*)",
      "Bash(docker stats:*)",
      "Bash(docker inspect:*)",
      "Bash(cp:*)",
      "Bash(docker logs:*)",
      "Bash(make build:*)",
      "Bash(make restart:*)",
      "Bash(tee:*)",
      "WebSearch",
      "Bash(tree:*)",
      "Bash(make down:*)",
      "Bash(make:*)",
      "Bash(git ls-tree:*)",
      "Bash(git log:*)",
      "Bash(EMBEDDING_MODE=mock docker compose:*)",
      "Bash(export EMBEDDING_MODE=mock)",
      "Bash(EMBEDDING_MODE=mock pytest:*)",
      "Read(//home/giak/.config/**)",
      "Bash(for file in docs/agile/serena-evolution/03_EPICS/EPIC-11_STORY_11.*_COMPLETION_REPORT.md)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(done)",
      "Bash(for file in docs/agile/serena-evolution/03_EPICS/EPIC-11_STORY_*.md)",
      "Bash(xargs:*)",
      "Bash(git checkout:*)",
      "Bash(for file in .claude/skills/mnemolite-gotchas/domains/*.md)",
      "Bash(docker-compose build:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker cp:*)",
      "Bash(for i in {1..5})",
      "Bash(do curl -s http://localhost:8001/health)",
      "Bash(timeout 5 curl:*)",
      "Bash(timeout 5 docker compose exec:*)",
      "Bash(timeout 180 docker compose build:*)",
      "Bash(cat:*)",
      "Bash(timeout 8 docker compose exec:*)",
      "Bash(timeout 10 docker compose exec:*)",
      "Read(//tmp/**)",
      "Bash(test:*)",
      "Bash(timeout 5 /home/giak/Work/MnemoLite/scripts/mcp_server.sh:*)",
      "Bash(chmod:*)",
      "mcp__mnemolite__ping",
      "Bash(bash:*)",
      "mcp__mnemolite__search_code",
      "mcp__mnemolite__write_memory",
      "Bash(\"Test utilisateur: Est-ce que le hook fonctionne?\" )",
      "Bash(\"Test assistant: Oui, le hook devrait maintenant fonctionner après les 3 bugfixes!\" )",
      "Bash(\"20251028_test_hook\")",
      "Bash(\"20251028_test\")",
      "Bash(\"du cop, cette conversation, ce message précedent est sauvagardé ?\" )",
      "Bash(\"Bonne question! Vérifions si le hook Stop a bien sauvegardé notre conversation sur les tests MCP...\" )",
      "Bash(\"test-session-manual\")",
      "Bash(jq:*)",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_BUGFIX_CRITICAL_COMPLETION_REPORT.md\" )",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_FINAL_COMPLETION_REPORT.md\" )",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_MONITORING_IMPLEMENTATION.md\")",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_ARCHITECTURE_ULTRATHINK.md\" )",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_MONITORING_ULTRATHINK.md\" )",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_SOLUTIONS_COMPARISON_ULTRATHINK.md\" )",
      "Bash(\"docs/agile/serena-evolution/03_EPICS/EPIC-24_SIMULATION_DEEP_ANALYSIS.md\")"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "mnemolite"
  ],
  "hooks": {
    "Stop": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/Stop/auto-save.sh",
            "timeout": 5
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/UserPromptSubmit/auto-save-previous.sh",
            "timeout": 5
          }
        ]
      }
    ]
  },
  "disableAllHooks": false,
  "outputStyle": "default"
}
